import marimo

__generated_with = "0.10.17"
app = marimo.App(width="medium")


@app.cell
def _():
    import marimo as mo
    return (mo,)


@app.cell
def _(mo):
    mo.md(r"""# Preparing SeaBASS Files""")
    return


@app.cell
def _():
    from utopia_pipeline_tools.azure_blob_tools import list_containers_in_blob
    from IPython.display import display
    import utopia_pipeline_tools as upt
    import numpy as np
    import pandas as pd
    from utopia_pipeline_tools.classified_to_seabass import MakeSeaBASS as msb
    return display, list_containers_in_blob, msb, np, pd, upt


@app.cell
def _():
    import global_val_setup as gvs
    return (gvs,)


@app.cell
def _(mo):
    mo.md(
        r"""
        ## Instructions  

        1. Indicate whether the IFCB images and sample metadata files produced during the initial processing step are located in Azure blob storage or on your local machine. If stored locally, select the `ml` folder in the corresponding file browser.
        2. Use the checkboxes to indicate whether you're using default investigator information, whether your data includes flags and stations and whether you want to include an existing DataFrame of sample metadata csv filenames. If you have the DataFrame of filenames, select it in the corresponding file browser that appears when you select the checkbox. Otherwise, indicate whether you would like to save the DataFrame of filenames generated by the SeaBASS tool later on.
        3. Use the corresponding file browsers to select the locations of the CNN-classification file produced by the `create_cnn_dataset_csv.py` notebook and the general dataset metadata file used as an input during the initial processing step.
        4. Enter all header information. The 'Experiment name' and 'Cruise name' entries should correspond to the experiment and cruise names on the SeaBASS website (e.g. TARA-EUROPA and TARA_EUROPA_2024).
        5. Click the `Prepare SeaBASS tool` button. If you haven't included a csv of sample metadata csv filenames, this step will take quite a while. For the Tara Europa 2024 dataset, the preperation step takes around 70 min. If the filenames are included during setup, this step will only take around 40 seconds.
        6. The notebook will automatically display the header and first 150 data lines of a single SeaBASS file. Check that the header values are all correct and that the lines of data have been generated correctly.
        7. Click the `Generate all SeaBASS files` button to create all the SeaBASS files for the dataset. They will be saved in a folder called `{cruise_name}\_SeaBASS\_{data_status}` on your local machine. This will take several hours, approximately 5 seconds per sample. The Tara Europa 2024 dataset () takes about 4 hours to run.
        """
    )
    return


@app.cell
def _(mo):
    mo.md("""## Setup""")
    return


@app.cell
def _(mo):
    blob_selection = mo.ui.dropdown(['blob', 'local'])
    default_investigators = mo.ui.checkbox(value=True, label='Using default investigators')
    flags = mo.ui.checkbox(value=True, label='Including flags')
    stations = mo.ui.checkbox(value=True, label='Inlcuding stations')
    existing_csvfilenames = mo.ui.checkbox(value=False, label='Existing sample csv filenames')
    mo.md(f"""Select whether your images are stored on the Azure blob or on your local machine:   
    {blob_selection}    


    {default_investigators}  
    {existing_csvfilenames}  
    {flags}  
    {stations}
    """)
    return (
        blob_selection,
        default_investigators,
        existing_csvfilenames,
        flags,
        stations,
    )


@app.cell
def _(blob_selection, display, mo):
    classification_file_selection = mo.ui.file_browser('/', selection_mode='file', filetypes=['.csv'])
    metadata_file_selection = mo.ui.file_browser('/', selection_mode='file', filetypes=['.csv'])

    if blob_selection.value == 'local':
        ml_filepath_selection = mo.ui.file_browser('/', selection_mode='directory')
        display(mo.md(f"""Select the folder titled 'ml' that contains your processed IFCB data:  
        {ml_filepath_selection} 
        """))
    return (
        classification_file_selection,
        metadata_file_selection,
        ml_filepath_selection,
    )


@app.cell
def _(classification_file_selection, mo):
    mo.md(f"""Select your csv file containing CNN-classifications:  
    {classification_file_selection}""")
    return


@app.cell
def _(metadata_file_selection, mo):
    mo.md(f"""Select the general metadata csv file:  
    {metadata_file_selection}  
    """)
    return


@app.cell
def _(display, existing_csvfilenames, mo):
    if existing_csvfilenames.value is True:
        sample_csv_filenames = mo.ui.file_browser('/', selection_mode='file', filetypes=['.csv'])
        display(mo.md(f"""Select your csv file containing the filenames of all sample csv files in the dataset:  
        {sample_csv_filenames}"""))
    else:
        save_sample_filenames = mo.ui.checkbox(value=True, label="Save")
        display(mo.md(f"""__Would you like to save the DataFrame of sample metadata csv filenames produced by the 
        SeaBASS tool to your local machine?__  
        {save_sample_filenames}
        """))
    return sample_csv_filenames, save_sample_filenames


@app.cell
def _(gvs):
    gvs.config_info['connection_string']
    return


@app.cell
def _(
    blob_selection,
    default_investigators,
    display,
    gvs,
    list_containers_in_blob,
    mo,
):
    experiment = mo.ui.text()
    cruise = mo.ui.text()
    data_status = mo.ui.dropdown(['Final', 'Preliminary'])
    chlorophyll = mo.ui.checkbox(value=True)
    scattering = mo.ui.checkbox(value=True)
    docs = mo.ui.text()
    notes = mo.ui.text()

    if blob_selection.value == 'blob':
        container_select = mo.ui.dropdown(list_containers_in_blob(connection_string=gvs.config_info['connection_string']))

        if default_investigators.value:
            display(mo.md(f"""__Enter header information:__  
                           Blob container: {container_select}  
                           Experiment name: {experiment}  
                           Cruise name: {cruise}  
                           Data status: {data_status}  \n
                           Select IFCB trigger mode(s):    
                           {chlorophyll} Chlorophyll {scattering} Scattering  \n
                           List associated documents (comma-separated):    
                           {docs} \n  
                           _Additional notes (optional):_  
                           {notes}  
                   """))
        else:
            investigators = mo.ui.text()
            orgs = mo.ui.text()
            emails = mo.ui.text()
            display(mo.md(f"""__Enter header information:__  
                           Please type all investigators, associated organizations, and emails in comma-separated 
                           lists without spaces. Investigators should be of the form: _First\_Last,First\_Last,..._
                           \n  
                           Blob container: {container_select}  
                           Experiment name: {experiment}  
                           Cruise name: {cruise}     
                           Data status: {data_status}  \n
                           Select IFCB trigger mode(s):   
                           {chlorophyll} Chlorophyll {scattering} Scattering  \n
                           List associated documents (comma-separated):    
                           {docs} \n  
                           Enter investigator information:    
                           Investigators: {investigators}  
                           Organizations: {orgs}  
                           Emails: {emails}  \n
                           _Additional notes (optional):_  
                           {notes}  
                    """))
    else: 
        if default_investigators.value:
            display(mo.md(f"""__Enter header information:__  
                           Experiment name: {experiment}  
                           Cruise name: {cruise}  
                           Data status: {data_status}  \n
                           Select IFCB trigger mode(s):    
                           {chlorophyll} Chlorophyll {scattering} Scattering  \n
                           List associated documents (comma-separated):    
                           {docs} \n  
                           _Additional notes (optional):_  
                           {notes}  
                   """))
        else:
            investigators = mo.ui.text()
            orgs = mo.ui.text()
            emails = mo.ui.text()
            display(mo.md(f"""__Enter header information:__  
                           Please type all investigators, associated organizations, and emails in comma-separated 
                           lists without spaces. Investigators should be of the form: _First\_Last,First\_Last,..._
                           \n  
                           Experiment name: {experiment}  
                           Cruise name: {cruise}     
                           Data status: {data_status}  \n
                           Select IFCB trigger mode(s):    
                           {chlorophyll} Chlorophyll {scattering} Scattering  \n
                           List associated documents (comma-separated):    
                           {docs} \n  
                           Enter investigator information:    
                           Investigators: {investigators}  
                           Organizations: {orgs}  
                           Emails: {emails}  \n
                           _Additional notes (optional):_  
                           {notes}  
                    """))
    return (
        chlorophyll,
        container_select,
        cruise,
        data_status,
        docs,
        emails,
        experiment,
        investigators,
        notes,
        orgs,
        scattering,
    )


@app.cell
def _(
    blob_selection,
    classification_file_selection,
    container_select,
    cruise,
    data_status,
    default_investigators,
    emails,
    existing_csvfilenames,
    experiment,
    investigators,
    metadata_file_selection,
    ml_filepath_selection,
    organizations,
    sample_csv_filenames,
):
    if blob_selection.value == 'blob':
        if default_investigators.value is True:
            if existing_csvfilenames.value is True:
                run_condition = bool(experiment.value is not None and cruise.value is not None and 
                                     data_status.value is not None and classification_file_selection.path(0) 
                                     is not None and metadata_file_selection.path(0) is not None and 
                                     container_select.value is not None and sample_csv_filenames.path(0) 
                                     is not None)
            else:
                run_condition = bool(experiment.value is not None and cruise.value is not None and 
                                     data_status.value is not None and classification_file_selection.path(0) 
                                     is not None and metadata_file_selection.path(0) is not None and 
                                     container_select.value is not None)
        else:
            if existing_csvfilenames.value is True:
                run_condition = bool(experiment.value is not None and cruise.value is not None and 
                                     data_status.value is not None and classification_file_selection.path(0) 
                                     is not None and metadata_file_selection.path(0) is not None and 
                                     investigators.value is not None and organizations.value is not None 
                                     and emails.value is not None and container_select.value is not None 
                                     and sample_csv_filenames.path(0) is not None)
            else:
                run_condition = bool(experiment.value is not None and cruise.value is not None and 
                                     data_status.value is not None and classification_file_selection.path(0) 
                                     is not None and metadata_file_selection.path(0) is not None and 
                                     investigators.value is not None and organizations.value is not None 
                                     and emails.value is not None and container_select.value is not None)
    elif blob_selection.value == 'local':
        if default_investigators.value is True:
            if existing_csvfilenames.value is True:
                run_condition = bool(experiment.value is not None and cruise.value is not None and 
                                     data_status.value is not None and classification_file_selection.path(0) 
                                     is not None and metadata_file_selection.path(0) is not None and 
                                     ml_filepath_selection is not None and sample_csv_filenames.path(0) 
                                     is not None)
            else:
                run_condition = bool(experiment.value is not None and cruise.value is not None and 
                                     data_status.value is not None and classification_file_selection.path(0) 
                                     is not None and metadata_file_selection.path(0) is not None and 
                                     ml_filepath_selection is not None)
        else:
            if existing_csvfilenames.value is True:
                run_condition = bool(experiment.value is not None and cruise.value is not None and 
                                     data_status.value is not None and classification_file_selection.path(0) 
                                     is not None and metadata_file_selection.path(0) is not None and 
                                     ml_filepath_selection is not None and investigators.value is not 
                                     None and organizations.value is not None and emails.value is not 
                                     None and sample_csv_filenames.path(0) is not None)
            else:
                run_condition = bool(experiment.value is not None and cruise.value is not None and 
                                     data_status.value is not None and classification_file_selection.path(0) 
                                     is not None and metadata_file_selection.path(0) is not None and 
                                     ml_filepath_selection is not None and investigators.value is not 
                                     None and organizations.value is not None and emails.value is not 
                                     None)
    else:
        run_condition = False
    return (run_condition,)


@app.cell
def _(
    blob_selection,
    chlorophyll,
    container_select,
    default_investigators,
    display,
    emails,
    existing_csvfilenames,
    gvs,
    investigators,
    ml_filepath_selection,
    mo,
    np,
    orgs,
    run_condition,
    sample_csv_filenames,
    scattering,
):
    if run_condition is True:
        if blob_selection.value == 'blob':
            container = container_select.value
            folder_filepath = None
        else:
            container = None
            folder_filepath = ml_filepath_selection.path(0)

        if default_investigators.value is True:
            investigator_info = gvs.default_investigators
        else:
            try: 
                keys = investigators.value.split(',')
                org_array = orgs.value.split('.')
                email_array = emails.value.split('.')

                investigator_info = {}

                for x in np.arange(len(keys)):
                    investigator_info[keys[x]] = [org_array[x], email_array[x]]
            except:
                investigator_info = None
        if chlorophyll.value is True and scattering.value is True:
            trigger_mode = 'both'
        elif chlorophyll.value is True and scattering.value is False:
            trigger_mode = 'chlorophyll'
        elif chlorophyll.value is False and scattering.value is True:
            trigger_mode = 'scattering'
        else:
            print("WARNING: No trigger mode selected.")
        if existing_csvfilenames.value is True:
            filepaths_fp = sample_csv_filenames.path(0)
        else:
            filepaths_fp = None


        prep_button = mo.ui.button(value=0, on_click=lambda value: value + 1, 
                                   label="Prepare SeaBASS tool", disabled=run_condition is False)
        display(prep_button)
    return (
        container,
        email_array,
        filepaths_fp,
        folder_filepath,
        investigator_info,
        keys,
        org_array,
        prep_button,
        trigger_mode,
        x,
    )


@app.cell
def _(
    blob_selection,
    classification_file_selection,
    container,
    cruise,
    data_status,
    docs,
    experiment,
    filepaths_fp,
    flags,
    folder_filepath,
    gvs,
    investigator_info,
    metadata_file_selection,
    msb,
    notes,
    prep_button,
    run_condition,
    stations,
):
    if run_condition and prep_button.value > 0:
        seabass_tool = msb(metadata_file_selection.path(0), classification_file_selection.path(0),
                           experiment.value, cruise.value, location=blob_selection.value,
                           container=container, folder_filepath=folder_filepath,
                           investigator_info=investigator_info, stations=stations.value, 
                           flags=flags.value, data_status=data_status.value, 
                           notes=notes.value, filepaths=filepaths_fp, doc_list=docs.value, 
                           config_info=gvs.config_info, cal_ratio=gvs.calibration_ratio)
    return (seabass_tool,)


@app.cell
def _(
    cruise,
    existing_csvfilenames,
    prep_button,
    run_condition,
    save_sample_filenames,
    seabass_tool,
):
    if run_condition and existing_csvfilenames is False and prep_button.value > 0:
        if save_sample_filenames.value is True:
            seabass_tool.sample_filenames.to_csv(f"""{cruise.value.replace(" ", "")}_sample_metadata_filenames.csv""")
    return


@app.cell
def _(display, mo, prep_button, run_condition):
    if run_condition and prep_button.value > 0:
        display(mo.md(r"""## Preview SeaBASS file"""))
    return


@app.cell
def _(display, mo, prep_button, run_condition, seabass_tool):
    if run_condition and prep_button.value > 0:
        display(mo.md('<div style="display: inline">https'.join('\n'.join('  '.join(
            seabass_tool.preview_seabass().split('  ')).split('\n')[0:150]).split('https'))))
    return


@app.cell
def _(display, mo, prep_button, run_condition):
    if run_condition and prep_button.value > 0:
        display(mo.md("""## Generate all SeaBASS files"""))
    return


@app.cell
def _(display, mo, prep_button, run_condition):
    if run_condition and prep_button.value > 0:
        full_run_button = mo.ui.button(value=0, on_click=lambda value: value + 1, 
                                       label='Generate all files')
        display(full_run_button)
    return (full_run_button,)


@app.cell
def _(full_run_button, prep_button, run_condition, seabass_tool):
    if run_condition and prep_button.value > 0:
        if full_run_button.value > 0:
            seabass_tool.make_seabass_files()
    return


if __name__ == "__main__":
    app.run()
